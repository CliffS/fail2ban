// Generated by CoffeeScript 2.3.2
(function() {
  var Fail2Ban, Jail, JailAction,
    indexOf = [].indexOf;

  Fail2Ban = require('./fail2ban');

  Jail = (function() {
    class Jail extends Fail2Ban {
      constructor(jail1, config) {
        super(config);
        this.jail = jail1;
        this.cfg = config;
        return this;
      }

      action(ACT) {
        return new JailAction(this.jail, ACT, this.cfg);
      }

      async addRegex(regex) {
        var current;
        current = (await this.regex);
        if (indexOf.call(current, regex) >= 0) {
          throw new Error("Regex already exists");
        }
        return this.message('set', this.jail, 'addfailregex', regex);
      }

      // returns list of regexes
      async delRegex(regex) {
        var current;
        current = (await this.regex);
        if (indexOf.call(current, regex) < 0) {
          throw new Error("Regex does not exist");
        }
        return this.message('set', this.jail, 'delfailregex', current.indexOf(regex));
      }

      // returns list of regexes
      ban(ip) {
        return this.message('set', this.jail, 'banip', ip);
      }

      // returns IP banned
      add(backend = 'systemd') {
        return this.message('add', this.jail, backend);
      }

      stop() {
        return this.message('stop', this.jail);
      }

      start() {
        return this.message('start', this.jail);
      }

      addIgnoreIp(ip) {
        return this.message('set', this.jail, 'addignoreip', ip);
      }

      delIgnoreIp(ip) {
        return this.message('set', this.jail, 'delignoreip', ip);
      }

      unban(ip) {
        return this.message('set', this.jail, 'unbanip', ip); // returns IP unbanned
      }

      addAction(ACT) {
        return this.message('set', this.jail, 'addaction', ACT);
      }

    };

    Jail.property('status', {
      get: async function() {
        var e, response, status;
        try {
          response = (await this.message('status', this.jail));
          return status = {
            filter: {
              currentlyFailed: response[0][1][0][1],
              totalFailed: response[0][1][1][1],
              fileList: response[0][1][2][1]
            },
            actions: {
              currentlyBanned: response[1][1][0][1],
              totalBanned: response[1][1][1][1],
              bannedIPList: response[1][1][2][1]
            }
          };
        } catch (error) {
          e = error;
          return status = null;
        }
      }
    });

    Jail.property('regex', {
      get: async function() {
        return (await this.message('get', this.jail, 'failregex'));
      }
    });

    Jail.property('actions', {
      get: async function() {
        return (await this.message('get', this.jail, 'actions'));
      }
    });

    Jail.property('findTime', {
      get: async function() {
        return (await this.message('get', this.jail, 'findtime'));
      },
      set: async function(secs) {
        return (await this.message('set', this.jail, 'findtime', secs.toString()));
      }
    });

    Jail.property('banTime', {
      get: async function() {
        return (await this.message('get', this.jail, 'bantime'));
      },
      set: async function(secs) {
        return (await this.message('set', this.jail, 'bantime', secs.toString()));
      }
    });

    Jail.property('failRegex', {
      get: async function() {
        return (await this.message('get', this.jail, 'failregex'));
      },
      set: async function(secs) {
        return (await this.message('set', this.jail, 'failregex', secs.toString()));
      }
    });

    Jail.property('retries', {
      get: async function() {
        return (await this.message('get', this.jail, 'maxretry'));
      },
      set: async function(reties) {
        return (await this.message('set', this.jail, 'maxretry', reties.toString()));
      }
    });

    Jail.property('useDNS', {
      get: async function() {
        return (await this.message('get', this.jail, 'usedns'));
      },
      set: async function(mode) {
        var modes;
        modes = ['yes', 'warn', 'no', 'raw'];
        if (indexOf.call(modes, mode) < 0) {
          throw new Error("Valid modes are: yes, warn, no and raw");
        }
        return (await this.message('set', this.jail, 'usedns', mode));
      }
    });

    return Jail;

  }).call(this);

  JailAction = (function() {
    class JailAction extends Jail {
      constructor(jail, action, config) {
        super(jail, config);
        this.action = action;
        this.jail = jail;
        return this;
      }

      async getProp(propName) {
        return (await this.message('get', this.jail, 'action', this.action, propName));
      }

    };

    JailAction.property('actionStart', {
      get: function() {
        return this.message('get', this.jail, 'action', this.action, 'actionstart');
      },
      set: async function(cmd) {
        return (await this.message('set', this.jail, 'action', this.action, 'actionstart', cmd));
      }
    });

    JailAction.property('actionStop', {
      get: function() {
        return this.message('get', this.jail, 'action', this.action, 'actionstop');
      },
      set: async function(cmd) {
        return (await this.message('set', this.jail, 'action', this.action, 'actionstop', cmd));
      }
    });

    JailAction.property('actionCheck', {
      get: function() {
        return this.message('get', this.jail, 'action', this.action, 'actioncheck');
      },
      set: async function(cmd) {
        return (await this.message('set', this.jail, 'action', this.action, 'actioncheck', cmd));
      }
    });

    JailAction.property('actionBan', {
      get: function() {
        return this.message('get', this.jail, 'action', this.action, 'actionban');
      },
      set: async function(cmd) {
        return (await this.message('set', this.jail, 'action', this.action, 'actionban', cmd));
      }
    });

    JailAction.property('actionUnban', {
      get: function() {
        return this.message('get', this.jail, 'action', this.action, 'actionunban');
      },
      set: async function(cmd) {
        return (await this.message('set', this.jail, 'action', this.action, 'actionunban', cmd));
      }
    });

    JailAction.property('timeout', {
      get: function() {
        return this.message('get', this.jail, 'action', this.action, 'timeout');
      },
      set: async function(cmd) {
        return (await this.message('set', this.jail, 'action', this.action, 'timeout', cmd));
      }
    });

    JailAction.property('actionProperties', {
      get: async function() {
        return (await this.message('get', this.jail, 'actionproperties', this.action));
      }
    });

    JailAction.property('actionMethods', {
      get: async function() {
        return (await this.message('get', this.jail, 'actionmethods', this.action));
      }
    });

    return JailAction;

  }).call(this);

  module.exports = Jail;

}).call(this);
